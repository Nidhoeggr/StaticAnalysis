package data

import de.fosd.typechef.featureexpr.FeatureExpr
import de.fosd.typechef.parser.java15.{TokenWrapper,JavaLexer}
import de.fosd.typechef.parser._
import de.fosd.typechef.conditional.{One, Choice, Conditional, Opt}
import de.fosd.typechef.parser.MultiFeatureParser
/**
 * Created by IntelliJ IDEA.
 * User:
 * Date: 13.09.11
 * Time: 10:37
 * To change this template use File | Settings | File Templates.
 */

class WhileParser extends MultiFeatureParser() {
    type Elem = TokenWrapper
    type TypeContext = Null


    def start: MultiParser[List[Opt[Statement]]] = textToken("begin") ~ textToken("{") ~> program <~ textToken("}") <~ textToken("end")

    def program: MultiParser[List[Opt[Statement]]] = repOpt(statement)

    def statement: MultiParser[Statement] =
          assignment       |
          whileLoop        |
          ifelse


    def assignment: MultiParser[Assignment] =
       identifier ~ textToken("=") ~  expression ~textToken(";")^^ {case a~_~ b~_ => new Assignment(new IdentExpression(a.getText),b)}

    def whileLoop: MultiParser[WhileStatement] =
      textToken("while")  ~ textToken("(")  ~ condition ~ textToken(")") ~ textToken("{")~ program ~ textToken("}") ^^
        {case _~_~c~_~_~p~_ => new WhileStatement(c,new Program(p))};

    def ifelse: MultiParser[Ifelse] =
      textToken("if") ~ textToken("(") ~> condition ~ textToken(")") ~ textToken("{") ~ program ~ textToken("}") ~ textToken("else") ~ textToken("{") ~ program ~ textToken("}") ^^
        {case c~_~_~stm~_~_~_~stmElse~_ => new Ifelse(c, new Program(stm), new Program(stmElse))}

    def condition: MultiParser[Condition] =
          conditionEquals   |
          conditionGreater  |
          conditionLesser    |
          conditionGreaterOrEquals   |
          conditionLessOrEquals

    def conditionEquals: MultiParser[Condition] =
          identifier ~ textToken("==") ~ expression  ^^ {case b~_~e  => new ConditionEquals(new IdentExpression(b.getText), e)}

    def conditionGreater: MultiParser[Condition] =
          identifier ~ textToken(">") ~ expression  ^^ {case b~_~e  => new ConditionGreater(new IdentExpression(b.getText), e)}

    def conditionLesser: MultiParser[Condition] =
          identifier ~ textToken("<") ~ expression  ^^ {case b~_~e  => new ConditionLesser(new IdentExpression(b.getText), e)}

    def conditionGreaterOrEquals: MultiParser[Condition] =
        identifier ~ textToken(">=") ~ expression  ^^ {case b~_~e  => new ConditionGreaterOrEquals(new IdentExpression(b.getText), e) }

    def conditionLessOrEquals: MultiParser[Condition] =
        identifier ~ textToken("<=") ~ expression  ^^ {case b~_~e  => new ConditionLessOrEquals(new IdentExpression(b.getText), e)}

    def expression: MultiParser[Expression] =
       addExpression      |
       subExpression      |
       mulExpression      |
       divExpression      |
       intToken  ^^ {x => new IntExpression(x.getText)}  |
       identifier ^^ {x => new IdentExpression(x.getText)}

    def addExpression: MultiParser[Expression] =
        identifier ~ textToken("+")~ expression ^^ {case b~_~e =>   new AddExpression(new IdentExpression(b.getText),e)}

    def subExpression: MultiParser[Expression]  =
      identifier ~ textToken("-")~ expression ^^ {case b~_~e => new SubExpression(new IdentExpression(b.getText),e)}

    def mulExpression: MultiParser[Expression]  =
      identifier ~ textToken("*") ~ expression ^^ {case b~_~e => new MulExpression(new IdentExpression(b.getText),e)}

    def divExpression: MultiParser[Expression]  =
      identifier ~ textToken("/") ~ expression ^^ {case b~_~e => new DivExpression(new IdentExpression(b.getText),e)}

  def identifier: MultiParser[Elem] = token("identifier", x=>x.getText().matches("""[a-zA-Z]([a-zA-Z0-9]|_[a-zA-Z0-9])*"""))

  def textToken(t: String): MultiParser[Elem] =
      token(t, _.getText == t)

  def intToken : MultiParser[Elem] =
      token("integer", x=>x.getText().matches("""([1-9][0-9]*)|0"""))


}

class TestRunner {

    import org.junit.Test

    @Test
    def run0 {
    var counter:Int = 0;
      while(counter<100){
        var gen:Generator = new Generator(10,10,10,10)
        var code:String = """begin{ """ + gen.generateProgramm("A",1) +  """ }
        end
        """
        var prog:Program = runTest(code)
        automaticTest(code)
        counter += 1
      }
    }

    @Test
    def run1 {
       val code = """begin{
                n=u+1;
                if(n<=2){
                  d=u;
                }else{
                  while(n>u){
                    t=u;
                    u=v;
                    v=u+t;
                  }
                }
                x=5;
             }
             end
             """

           val prog:Program = runTest(code)
             automaticTest(code)

 }

  @Test
  def run2 {
     val code = """begin{
            z=a;
            while(x>b){
              z=z*x;
              x=x-1;
            }
           }
           end
           """

            val prog:Program = runTest(code)
             automaticTest(code)
  }

  @Test
  def run3 {
      val code = """begin{
            x=a+b;
            y=a*b;
            while(y>a+b){
              a=a+1;
              x=a-c;
            }
           }
           end
           """

           val prog:Program = runTest(code)
           automaticTest(code)
  }

  @Test
  def run4 {
      val code = """begin{
              x=a+b;
              //#if X
              if(a<3){
                c=5;
              }else{
                d=5;
              }
              a=b+c;
              //#else
              a=1;
              //#endif
              b=c;
           }
           end
           """

           val prog:Program = runTest(code)
             automaticTest(code)

  }

  @Test
  def run5 {
      val code = """begin{
              x=a+b;
              //#if X
                b=e+f-g;
                d=x+1;
              //#else
                a=x/abc;
                h=x+1;
              //#endif
              b=c;
           }
           end
           """

           val prog:Program = runTest(code)
             automaticTest(code)

  }


  @Test
  def run6 {
     val code = """begin{
              //#if X
                x=3;
              //#endif
           }
           end
           """

           val prog:Program = runTest(code)
             automaticTest(code)
                assert(prog.printFlow.isEmpty)
                assert(prog.printAE.equals("\nAss[x,3]def(X) AEentry: Set() AEexit: Set(3)"))
                assert(prog.printKillGen.equals("\nAss[x,3]def(X)Kill: Set()Gen: Set(3)"))

  }

    @Test
    def run7 {
        val code = """begin{
             a=b+c;
             c=a;
             }
             end
             """

           val prog:Program = runTest(code)
             automaticTest(code)
                  assert(prog.printFlow.equals("(Ass[a,Add[b,c]]True,Ass[c,a]True)\n"))
                  assert(prog.printAE.equals("\nAss[a,Add[b,c]]True AEentry: Set() AEexit: Set(Add[b,c])\nAss[c,a]True AEentry: Set(Add[b,c]) AEexit: Set(a)"))
                  assert(prog.printKillGen.equals("\nAss[a,Add[b,c]]TrueKill: Set(a)Gen: Set(Add[b,c])\nAss[c,a]TrueKill: Set(Add[b,c])Gen: Set(a)"))

  }

    @Test
    def run8 {
        val code = """begin{
                while(x>c){
                  a=b+c;
                  c=c+1;
                }
             }
             end
             """

           val prog:Program = runTest(code)
             automaticTest(code)
                  assert(prog.printFlow.equals("(Gr[x,c]True,Ass[a,Add[b,c]]True)\n(Ass[c,Add[c,1]]True,Gr[x,c]True)\n(Ass[a,Add[b,c]]True,Ass[c,Add[c,1]]True)\n"))
                  assert(prog.printAE.equals("\nGr[x,c]True AEentry: Set() AEexit: Set(c)\nAss[a,Add[b,c]]True AEentry: Set(c) AEexit: Set(c, Add[b,c])\nAss[c,Add[c,1]]True AEentry: Set(c, Add[b,c]) AEexit: Set()"))
                  assert(prog.printKillGen.equals("\nGr[x,c]TrueKill: Set()Gen: Set(c)\nAss[a,Add[b,c]]TrueKill: Set()Gen: Set(Add[b,c])\nAss[c,Add[c,1]]TrueKill: Set(c, Add[b,c], Add[c,1])Gen: Set()"))

  }

    @Test
    def run9 {
       val code = """begin{
                if(a>b*c){
                  b=c;
                }else{
                  b=a;
                }
                c=3;
             }
             end
             """

           val prog:Program = runTest(code)
             automaticTest(code)
                  assert(prog.printFlow.equals("(Gr[a,Mul[b,c]]True,Ass[b,c]True)\n(Gr[a,Mul[b,c]]True,Ass[b,a]True)\n(Ass[b,c]True,Ass[c,3]True)\n(Ass[b,a]True,Ass[c,3]True)\n"))
                  assert(prog.printAE.equals("\nGr[a,Mul[b,c]]True AEentry: Set() AEexit: Set(Mul[b,c])\nAss[b,c]True AEentry: Set(Mul[b,c]) AEexit: Set(c)\nAss[b,a]True AEentry: Set(Mul[b,c]) AEexit: Set(a)\nAss[c,3]True AEentry: Set() AEexit: Set(3)"))
                  assert(prog.printKillGen.equals("\nGr[a,Mul[b,c]]TrueKill: Set()Gen: Set(Mul[b,c])\nAss[b,c]TrueKill: Set(Mul[b,c])Gen: Set(c)\nAss[b,a]TrueKill: Set(Mul[b,c])Gen: Set(a)\nAss[c,3]TrueKill: Set(Mul[b,c], c)Gen: Set(3)"))

  }

  @Test
  def run10 {
      val code = """begin{
              if(a>e){
                c=a+b;
              }else{
                c=a+b;
              }
              d=c;
           }
           end
           """

            val prog:Program = runTest(code)
             automaticTest(code)
                assert(prog.printFlow.equals("(Gr[a,e]True,Ass[c,Add[a,b]]True)\n(Gr[a,e]True,Ass[c,Add[a,b]]True)\n(Ass[c,Add[a,b]]True,Ass[d,c]True)\n(Ass[c,Add[a,b]]True,Ass[d,c]True)\n"))
                assert(prog.printAE.equals("\nGr[a,e]True AEentry: Set() AEexit: Set(e)\nAss[c,Add[a,b]]True AEentry: Set(e) AEexit: Set(e, Add[a,b])\nAss[c,Add[a,b]]True AEentry: Set(e) AEexit: Set(e, Add[a,b])\nAss[d,c]True AEentry: Set(e) AEexit: Set(e, c)"))
                assert(prog.printKillGen.equals("\nGr[a,e]TrueKill: Set()Gen: Set(e)\nAss[c,Add[a,b]]TrueKill: Set(c)Gen: Set(Add[a,b])\nAss[c,Add[a,b]]TrueKill: Set(c)Gen: Set(Add[a,b])\nAss[d,c]TrueKill: Set()Gen: Set(c)"))

}


  @Test
  def run11 {
      val code = """begin{
              //#if x
                c=a-b;
              //#else
                c=a+b;
              //#endif
              d=c;
           }
           end
           """

            val prog:Program = runTest(code)
            automaticTest(code)
                assert(prog.printFlow.equals("(Ass[c,Sub[a,b]]def(x),Ass[d,c]True)\n(Ass[c,Add[a,b]]!def(x),Ass[d,c]True)\n"))
                assert(prog.printAE.equals("\nAss[c,Sub[a,b]]def(x) AEentry: Set() AEexit: Set(Sub[a,b])\nAss[c,Add[a,b]]!def(x) AEentry: Set() AEexit: Set(Add[a,b])\nAss[d,c]True AEentry: Set(Add[a,b], Sub[a,b]) AEexit: Set(Add[a,b], Sub[a,b], c)"))
                assert(prog.printKillGen.equals("\nAss[c,Sub[a,b]]def(x)Kill: Set(c)Gen: Set(Sub[a,b])\nAss[c,Add[a,b]]!def(x)Kill: Set(c)Gen: Set(Add[a,b])\nAss[d,c]TrueKill: Set()Gen: Set(c)"))

}


  @Test
  def run12 {
      val code = """begin{
                c=d*f/abc;
                d=1;
           }
           end
           """

            val prog:Program = runTest(code)
            automaticTest(code)
                assert(prog.printFlow.equals("(Ass[c,Mul[d,Div[f,abc]]]True,Ass[d,1]True)\n"))
                assert(prog.printAE.equals("\nAss[c,Mul[d,Div[f,abc]]]True AEentry: Set() AEexit: Set(Div[f,abc], Mul[d,Div[f,abc]])\nAss[d,1]True AEentry: Set(Div[f,abc], Mul[d,Div[f,abc]]) AEexit: Set(Div[f,abc], 1)"))
                assert(prog.printKillGen.equals("\nAss[c,Mul[d,Div[f,abc]]]TrueKill: Set()Gen: Set(Div[f,abc], Mul[d,Div[f,abc]])\nAss[d,1]TrueKill: Set(Mul[d,Div[f,abc]])Gen: Set(1)"))

}

  @Test
  def run13 {

      val code = """begin{
              a=b+c;
              //#if X
                if(a<b){
                  f=x;
                }else{
                  g=y;
                }
                w=z;
              //#endif
              e=z;
           }
           end
           """

           val prog:Program = runTest(code)
           automaticTest(code)

}


  @Test
  def run14 {
      val code = """begin{
              a=b+c;
              //#if X
                if(a<b){
                  //#if Y
                    f=5;
                    while(d<x){
                      h=x+y;
                      g=b-c;
                      //#if J
                        b=f+x-bla;
                      //#else
                        b=f+x+bla;
                        //#if T
                          f=x;
                        //#endif
                      //#endif
                    }
                  //#endif
                }else{
                  //#if A
                    v=1;
                    //#if B
                      f=2;
                      //#if C
                        g=6;
                      //#endif
                    //#endif
                  //#endif
                }
                w=20;
              //#endif
              e=z;
           }
           end
           """

            val prog:Program = runTest(code)
            automaticTest(code)

}


  @Test
  def run15 {

  val code = """begin{
              a=b+c;
              //#if X
                if(a<b){
                //#if H
                  f=5;
                  f=f+1;
                //#else
                  f=6;
                //#endif
                }else{
                  g=6;
                }
                w=20;
              //#endif
              e=z;
           }
           end
           """

            runTest(code)
            automaticTest(code)

}

 /*
  @Test
  def run16 {

  val code = """begin{
           //#ifdef X
           a=1;
           b=2;
           //#endif
            //#ifdef Y
              c=3;
              d=4;
            //#endif
           e=5;
           e=6;
            //#ifdef Z
                        //#ifdef M
           h=9;
           i=10;
           //#endif
              f=7;
              g=8;
            //#endif
            //#ifdef G
           h=9;
           i=10;
           //#endif
           //#ifdef A
           a=1;
           b=2;
           //#endif
            //#ifdef B
            x=5;
        //#ifdef Q
        a=1;
        //#endif
              c=3;
              d=4;
            //#endif
            //#ifdef H
           e=5;
           e=6;
           //#endif
            //#ifdef C
              f=7;
              g=8;
            //#endif
            //#ifdef K
                        //#ifdef L
           h=9;
           i=10;
           //#endif
           h=9;
           i=10;
           //#endif


           }
           end
           """

            runTest(code)
            automaticTest(code)

}

*/
  @Test
  def run17 {

  val code = """begin{
           //#ifdef X
            a=b+c;
           //#ifdef Y
            b=e/f;
            b=e-f;
           //#endif
            a=b*c;
           //#endif
           }end
           """

    val prog:Program = runTest(code)
    automaticTest(code)
  //  assert(prog.printFlow.equals("(Ass[a,Add[b,c]]def(X),Ass[a,Mul[b,c]]def(X))\n(Ass[a,Add[b,c]]def(X),Ass[b,Div[e,f]](def(Y)&def(X)))\n(Ass[b,Div[e,f]](def(Y)&def(X)),Ass[b,Sub[e,f]](def(Y)&def(X)))\n(Ass[b,Sub[e,f]](def(Y)&def(X)),Ass[a,Mul[b,c]]def(X))\n"))
    assert(prog.printAE.equals("\nAss[a,Add[b,c]]def(X) AEentry: Set() AEexit: Set(Add[b,c])\nAss[b,Div[e,f]](def(Y)&def(X)) AEentry: Set(Add[b,c]) AEexit: Set(Div[e,f])\nAss[b,Sub[e,f]](def(Y)&def(X)) AEentry: Set(Div[e,f]) AEexit: Set(Div[e,f], Sub[e,f])\nAss[a,Mul[b,c]]def(X) AEentry: Set(Div[e,f], Sub[e,f], Add[b,c]) AEexit: Set(Div[e,f], Sub[e,f], Add[b,c], Mul[b,c])"))
    assert(prog.printKillGen.equals("\nAss[a,Add[b,c]]def(X)Kill: Set()Gen: Set(Add[b,c])\nAss[b,Div[e,f]](def(Y)&def(X))Kill: Set(Add[b,c], Mul[b,c])Gen: Set(Div[e,f])\nAss[b,Sub[e,f]](def(Y)&def(X))Kill: Set(Add[b,c], Mul[b,c])Gen: Set(Sub[e,f])\nAss[a,Mul[b,c]]def(X)Kill: Set()Gen: Set(Mul[b,c])"))


}

  @Test
  def run18 {

  val code = """begin{
           //#ifdef X
            a=b+c;
           //#else
            a=b-c;
           //#endif
           //#ifdef Y
            a=b*c;
           //#endif
           }end
           """

    val prog:Program = runTest(code)
    automaticTest(code)
    assert(prog.printFlow.equals("(Ass[a,Add[b,c]]def(X),Ass[a,Mul[b,c]]def(Y))\n(Ass[a,Sub[b,c]]!def(X),Ass[a,Mul[b,c]]def(Y))\n"))
    assert(prog.printAE.equals("\nAss[a,Add[b,c]]def(X) AEentry: Set() AEexit: Set(Add[b,c])\nAss[a,Sub[b,c]]!def(X) AEentry: Set() AEexit: Set(Sub[b,c])\nAss[a,Mul[b,c]]def(Y) AEentry: Set(Sub[b,c], Add[b,c]) AEexit: Set(Sub[b,c], Add[b,c], Mul[b,c])"))
    assert(prog.printKillGen.equals("\nAss[a,Add[b,c]]def(X)Kill: Set()Gen: Set(Add[b,c])\nAss[a,Sub[b,c]]!def(X)Kill: Set()Gen: Set(Sub[b,c])\nAss[a,Mul[b,c]]def(Y)Kill: Set()Gen: Set(Mul[b,c])"))


}

  @Test
  def run19 {

  val code = """begin{
           //#ifdef Y
            b=c;
           //#ifdef X
            a=b*c;
           //#else
            b=b*c;
           //#endif
            c=f*g;
           //#endif
           }end
           """
    automaticTest(code)
  }


  @Test
  def run20 {

  val code = """begin{
        //#ifdef A
        s=1;
        //#else
          //#ifdef Y
           b=c;
          //#else
            //#ifdef X
              a=b*c;
            //#else
              b=b*c;
            //#endif
           c=f*g;
           //#endif
           //#endif
           x=5;
        //#ifdef E
        a=1;
        //#endif
        //#ifdef R
        b=2;
        //#endif
           }end
           """

    val prog:Program = runTest(code)
    automaticTest(code)

}

  @Test
  def run21 {

  val code = """begin{
        x=5;
        //#ifdef A
        a=1;
        //#endif
        //#ifdef B
        b=2;
        //#endif
        //#ifdef A
        //#else
        Na=3;
        //#endif
        //#ifdef A
        a=2;
        //#endif
        z=6;
        }end
           """

    val prog:Program = runTest(code)
    automaticTest(code)

}


  def automaticTest(code:String) {
    val prog:Program = runTestWithoutAnalysis(code)
    val prog1:Program = runTest(code)
    val prog2:List[Program] = explodeAnalyse(prog1)
    val test:List[List[Opt[AbstractSyntaxTree]]] = explodeVae(prog.stmList)
    var start:Long = System.currentTimeMillis()
    for(x:List[Opt[AbstractSyntaxTree]] <- test){
      if(!x.isEmpty){
        var progTest:Program = new Program(x)
        progTest = aeAnalysis(progTest)
        progTest.setFeaturesTrue
        assert(check(progTest, prog2, "aeEntry") &&
               check(progTest, prog2, "aeExit")  &&
               check(progTest, prog2, "gen")     &&
               check(progTest, prog2, "kill")    &&
               check(progTest, prog2, "flow"))
      }
    }
  //  timeOutput(start,"___NORMAL___")
  }


  def runTest(code:String):Program =  {
          val parser=new WhileParser()
          val y=parser.start(
          JavaLexer.lex(code),FeatureExpr.base)
            y match{
            case parser.Success(v,_) =>
                var prog = new Program(v)
                val start:Long = System.currentTimeMillis();
                prog=aeAnalysis(prog)
            //    timeOutput(start, "+++AE+++");
                output(prog)
                return prog
            case _ => return null
             }


  }

  def runTestWithoutAnalysis(code:String):Program ={
          val parser=new WhileParser()
          val y=parser.start(
          JavaLexer.lex(code),FeatureExpr.base)
            y match{
            case parser.Success(v,_) =>
                var prog = new Program(v)
                return prog
            case _ => return null
             }
  }

  def timeOutput(start:Long, art:String){
    val end:Long = System.currentTimeMillis();
    println("##################Benötigte Zeit für:" + art + (end - start)/1000.0);
  }

  def aeAnalysis(prog:Program):Program = {
    prog.setFeatures(null)
    prog.calculateFlowGraph()
    prog.generateBlocks
    prog.generateAllExpressions
    prog.setAllExpressions(prog.allExpressions)
    prog.stmList.head.entry.label.aeEntry=Set.empty
    prog.genAE
    prog.killAE(prog)
    var counter:Int = 0
    while(counter<10){
      prog.calculateAEentry(prog)
      prog.calculateAEexit(prog)
      counter = counter +1
    }
    return prog
  }

  def output(prog:Program){
    println("=========BLOCKS=========")
    println(prog.getBlocks.toString)
    println("=========BLOCKS-END=========")
    print("=========KILL-GEN=========")
    println(prog.printKillGen)
    println("=========KILL-GEN-END=========")
    print("=========AE=========")
    println(prog.printAE)
    println("=========AE-END=========")
    println("=========FLOW=========")
    print(prog.printFlow)
    println("=========FLOW-END=========")
  }


  /**
   * Setzt alle Features eines AST auf true, die äquivalent zu dem angegebenen Feature sind. Löscht den Rest. Der übergebene AST wird nicht verändert.
   */
  def configureAST(ast:List[Opt[AbstractSyntaxTree]],featureList:List[FeatureExpr], extended:Boolean): List[Opt[AbstractSyntaxTree]] = {
    var resultAST:List[Opt[AbstractSyntaxTree]] = List.empty
    var tmp:FeatureExpr = de.fosd.typechef.featureexpr.True
    for(f<-featureList){
      tmp = tmp.and(f)
    }
    if(!tmp.isSatisfiable())
      return resultAST
    for(stm:Opt[AbstractSyntaxTree] <- ast){
      for(feature:FeatureExpr <- featureList){
        if(!feature.andNot(stm.feature).isSatisfiable()){
          var cloned:Opt[AbstractSyntaxTree] = null
          if(extended)
            cloned = stm.copy(de.fosd.typechef.featureexpr.True, stm.entry.copyExtended)
          else
            cloned = stm.copy(de.fosd.typechef.featureexpr.True, stm.entry.copy)
          if(!resultAST.contains(cloned))
            resultAST=resultAST.::(cloned)
        }
      }
    }
    return resultAST.reverse      //Richtige Reihenfolge wieder herstellen
  }

  /**
   * Kombiniert alle Features
   */
  def generateAllFeatures(ast:List[Opt[AbstractSyntaxTree]]) : List[List[FeatureExpr]] = {
    var allFeatures:Set[FeatureExpr] = Set.empty
    for(stm:Opt[AbstractSyntaxTree]<-ast){
      if(stm.feature != de.fosd.typechef.featureexpr.True)
        allFeatures += stm.feature
    }
    var result:List[List[FeatureExpr]] = List.empty
    for(x <- 1 to allFeatures.size){
      result = result ::: allFeatures.toList.combinations(x).toList
    }
    return result
  }

  /**
   * Setzt alle Featurekombinationen die übergeben werden in den übergebenen AST ein und gibt alle ASTKobinationen zurück.
   */
  def explodeVae(ast:List[Opt[AbstractSyntaxTree]]): List[List[Opt[AbstractSyntaxTree]]] = {
    var exploded:List[List[Opt[AbstractSyntaxTree]]] = List(List.empty)
    val allFeatures:List[List[FeatureExpr]] = generateAllFeatures(ast)
    for(featureList:List[FeatureExpr] <- allFeatures){
      val configuredAST:List[Opt[AbstractSyntaxTree]] = configureAST(ast, featureList, false)
      exploded = exploded ::: List(configuredAST)
    }
    return exploded
  }

  /**
   * Nimmt eine fertige Analyse entgegen und generiert anhand aller Feature-Permutationen Teilanalysen der kompletten.
   */
  def explodeAnalyse(program:Program) : List[Program] = {
    var exploded:List[Program] = List.empty
    val allFeatures:List[List[FeatureExpr]] = generateAllFeatures(program.stmList)
    for(featureList:List[FeatureExpr] <- allFeatures){
      val tmp = configureAST(program.stmList, featureList, true)
      if(!tmp.isEmpty){
        exploded = exploded.::(configProgram(program, new Program(tmp.toList)))
      }
    }
    return exploded
  }

  def configProgram(analysis:Program, result:Program):Program = {
    result.setFeaturesTrue
    analysis.setFeaturesTrue
    result.flow=analysis.flow
    result.generateBlocks
    result.filterBlocks(result.stmList)
    result.generateAllExpressions
    val stmToFilter:List[AbstractSyntaxTree] = result.getAllExpressions.toList
    result.filterAeEntry(stmToFilter)
    result.filterAeExit(stmToFilter)
    //result.allExpressions = filterAllExpressions(analysis.allExpressions, stmToFilter)
    //result.exitNodes = filter(analysis.exitNodes, stmToFilter)
    result.filterGen(stmToFilter)
    result.filterKill(stmToFilter)
    result.filterFlow(result.stmList)
    return result
  }
/*
  def filterFlow(actual:Set[(AbstractSyntaxTree,AbstractSyntaxTree)], toFilter:List[Opt[AbstractSyntaxTree]]):Set[(AbstractSyntaxTree,AbstractSyntaxTree)] = {
    var result:Set[(AbstractSyntaxTree,AbstractSyntaxTree)] = Set.empty
    for((a,b) <- actual){
      for(stm:Opt[AbstractSyntaxTree] <- toFilter){
        if(a.getLabel.equals(stm.entry.getLabel))
          for(stm2:Opt[AbstractSyntaxTree] <- toFilter){
            if(b.getLabel.equals(stm2.entry.getLabel))
              result+=((a,b))
          }
      }
    }
    return result
  }
*/
  def filterAllExpressions(actual:Set[Expression], toFilter:List[Opt[AbstractSyntaxTree]]):Set[Expression] = {
    var result:Set[Expression] = Set.empty
    for(expr:Expression <- actual){
      if(toFilter.contains(expr))
        result+=expr
    }
    return result
  }

  def checkAnalysis(check:Program, checkAgainst:List[Program]):Boolean = {
    var namesCheck:String = check.toStringWithoutFeatures
    var namesCheckAgainst:String = ""
    var toKillEntry:Set[AbstractSyntaxTree] = check.aeEntry
    var toKillExit:Set[AbstractSyntaxTree] = check.aeExit
    for(progToCheckAgainst:Program <- checkAgainst){
      if(namesCheck.equals(progToCheckAgainst.toStringWithoutFeatures)){
        for(ae <- progToCheckAgainst.getLabel.aeEntry){
          for(ae2 <- check.getLabel.aeEntry){
            if(ae.toStringWithoutFeatures.equals(ae2.toStringWithoutFeatures)){
              toKillEntry.-(ae2)
            }
          }
        for(ae <- progToCheckAgainst.getLabel.aeExit){
          for(ae2 <- check.getLabel.aeExit){
            if(ae.toStringWithoutFeatures.equals(ae2.toStringWithoutFeatures)){
              toKillExit.-(ae2)
            }
          }
        }
        }
      }
    }
    if(toKillEntry.isEmpty && toKillExit.isEmpty)
      return true
    return false
  }

  def check(check:Program, checkAgainstList:List[Program], toCheck:String):Boolean = {
    for(stm:Opt[AbstractSyntaxTree] <- check.stmList){
      for(prog:Program <- checkAgainstList){
        for(stm2:Opt[AbstractSyntaxTree] <- prog.stmList){
          toCheck match{
            case "aeEntry" =>
              if(checkSet(stm.entry.aeEntry, stm2.entry.aeEntry)){
                return true
              }
            case "aeExit" =>
              if(checkSet(stm.entry.aeExit, stm2.entry.aeExit)){
                return true
              }
            case "gen" =>
              if(checkSet(stm.entry.gen, stm2.entry.gen)){
                return true
              }
            case "kill" =>
              if(checkSet(stm.entry.aeEntry, stm2.entry.aeEntry)) {
                return true
              }
            case "flow" =>
              if(check.compareFlow(check.flow, prog.flow))
                return true
          }
        }
      }
    }
    return false
  }

  def checkSet(check:Set[AbstractSyntaxTree], checkAgainst:Set[AbstractSyntaxTree]):Boolean = {
    if(check.toString.equals(checkAgainst.toString)){
      return true
    }
    return false
  }
}
